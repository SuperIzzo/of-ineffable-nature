pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- spookymanor
-- team spook

flag_collision = 6
flag_anim_end = 0
flag_sprite_map_bottom_layer = 6
flag_sprite_map_top_layer = 7

-- base speed for actors to move at
g_speed_accel = 1

-- how many frames between updating character frames
g_anim_update_interval = 5

-- global frame count 
g_frame = 0

camera_x = 0
camera_y = 0

-- the global pool of actors
actors = {}


-- gets the world position of the actor, as the actor.x and actor.y
--  store the actors position in cell coordinates
function transform_world_to_cell_coord(v)
    -- convert to world from cell, divide by 8 (due to 1 map cell being 8x8)
    --  then add 4 (half of the cell size)
    --return (v / 8) + 4
    return (v * 8) - 4
end

-- player functions
function pl_move()

    local x = 0
    local y = 0

    -- left
    if (btn(0)) x = -1

    -- right
    if (btn(1)) x = 1

    -- up
    if (btn(2)) y = -1

    -- down
    if (btn(3)) y = 1

    add_force_to_actor(pl,x,y)

end


-- main entry points
function _init()
    pl = add_actor(15,15,0)
    pl.isplayer = true
end

function _update()
    foreach(actors, update_actor)
end

function _draw()

    --clear the screen first
    cls()

    map(0,0,0,0,16,16)

    -- map(0,0,0,0,16,16,flag_sprite_map_bottom_layer)

    foreach(actors, draw_actor)

    -- map(0,0,0,0,16,16,flag_sprite_map_top_layer)

    --print("world xy "..pl.x ..","..pl.y,camera_x,110,7)
    --print("map x "..transform_world_to_cell_coord(pl.x)  ..","..transform_world_to_cell_coord(pl.y),camera_x,120,7)

    local cx = (pl.x / 8)
    local cy = (pl.y / 8) + 0.75
    
    print("world x "..pl.x  ..","..pl.y,camera_x,100,7)
    print("map x "..cx  ..","..cy,camera_x,110,7)
    --print("cxy "..pl.cx ..","..pl.cy.." mxy "..pl.mx..","..pl.my,camera_x,120,7)

    print("fps "..stat(7) ,camera_x + 100,120,7)

end

-- ########################################################################
--                          actor functions     start
-- ########################################################################

function setup_pl_anims(a)
    -- right, down, left, and up consist of 4 frames
    a.anim_sz = { 4, 4, 4, 4 }

    for i=1, 8 do
        a.anim[i] = {}
        for y=1, 4 do
            a.anim[i][y] = 0
        end
    end
    
    -- walk loop frames alternate so save disk space: frame 1, frame 2, frame 1, frame 3
    -- 1 = upper right
    -- 2 = lower right
    -- 3 = upper down
    -- 4 = lower down
    -- 5 = upper left
    -- 6 = lower left
    -- 7 = upper top
    -- 8 = lower top

    -- upper frames - since they're all the same right now
    for i=1,4 do
        a.anim[1][i] = 40   --right
        a.anim[3][i] = 8    --down
        a.anim[5][i] = 40   --left
        a.anim[7][i] = 11   --up
    end

    -- right and left lower frames
    a.anim[2][1] = 56
    a.anim[2][2] = 57
    a.anim[2][3] = 56
    a.anim[2][4] = 58
    
    -- left is the same as right
    for i=1,4 do
        a.anim[6][i] = a.anim[2][i]
    end

    -- down lower frames
    a.anim[4][1] = 24
    a.anim[4][2] = 25
    a.anim[4][3] = 24
    a.anim[4][4] = 26

    -- up lower frames
    a.anim[8][1] = 25
    a.anim[8][2] = 26
    a.anim[8][3] = 25
    a.anim[8][4] = 27
end

-- add an actor to the pool: 
-- x pos
-- y pos
-- actor type: 0 = player
function add_actor(x,y,at)
    local a = {}

    -- this x and y is world position, in pixels
    a.x = x
    a.y = y

    --a.cx = 0
    --a.cy = 0
    --a.mx = 0
    --a.my = 0

    a.anim = { }

    -- if this is a player, setup the player anims
    if at == 0 then
       setup_pl_anims(a)
    end

    -- physics delta speed variables.
    a.dx = 0
    a.dy = 0

    -- facing direction. 1 = right, 2 = down, 3 = left, 4 = up
    a.dir = 1

    -- is the actor moving
    a.moving = false

    -- current frame displaying; for upper and lower body
    a.frame = 1
    -- current animation frame timer
    a.frametime = 0

    a.isplayer = false

    add(actors, a)

    return a
end

-- add movement force to the actor:
-- the actor to add to
-- desired x direction - 0 is still, -1 is left, 1 is right
-- desired y direction - 0 is still, -1 is up, 1 is down
function add_force_to_actor(a,x,y)

    -- todo do we want this here? need to degrade it somehow rather than straight 0?
    a.dx = 0
    a.dy = 0

    -- any movement at all? set the actor moving
    a.moving = (x != 0 or y != 0)

    -- if not moving, set frame as 1 then exit out
    if (not a.moving) a.frame = 1 return

    if x > 0 then       a.dir = 1 --going right
    elseif x < 0 then   a.dir = 3 --going left
    elseif y > 0 then   a.dir = 2 --going down
    else                a.dir = 4 --going up
    end


    -- movement physics below


    -- apply global acceleration depending on desired x/y
    a.dx += g_speed_accel * x
    a.dy += g_speed_accel * y


    -- animation selection below

    a.frametime+=1
    
    -- exit out if we haven't reached the frame update time
    if (a.frametime % g_anim_update_interval != 0)  return

    -- if we've reached the end, reloop
    if a.frame == a.anim_sz[a.dir] then
        a.frame = 1
    else
        a.frame += 1
    end

    a.frametime = 0

end

function update_actor(a)

    if (a.isplayer) pl_move(a)

    local cx = (a.x / 8)
    local cy = (a.y / 8) + 0.75

    if not is_map_solid(cx, cy, a.dx, a.dy) then
        a.x += a.dx
        a.y += a.dy
    end

end

function draw_actor(a)

    local dir = a.dir*2

   -- local x = transform_world_to_cell_coord(a.x)
   -- local y = transform_world_to_cell_coord(a.y)

    -- upper
    spr(a.anim[dir-1][a.frame],     a.x,    a.y - 8,    1.0,    1.0, a.dir == 3)
    
    -- lower
    spr(a.anim[dir][a.frame],       a.x,    a.y,        1.0,    1.0, a.dir == 3)

end

-- ########################################################################
--                          actor functions     end
-- ########################################################################

-- ########################################################################
--                          physics functions     start
-- ########################################################################

function is_cell_solid(x,y)
    return fget(mget(x,y), flag_collision)
end

-- current position x,y, then direction x,y
function is_map_solid(x,y,dx,dy)

    -- get the remainder
    local mod_x = x % 1
    local mod_y = y % 1

    -- and the absolute cell position
    local cell_x = x - mod_x
    local cell_y = y - mod_y
    
    -- radius to the walls

    -- when within a radius to a wall, add the direction to the cell check
    --  to check the next one we would run into
    if dx != 0 and mod_x <= 0.15 then
        cell_x += dx
    end

    -- like above but the y needs slightly different values
    if dy == -1 and mod_y <= 0.5 then
        cell_y += dy
    elseif dy == 1 and mod_y >= 0.75 then
        cell_y += dy
    end

    -- debug only
    -- pl.cx = cell_x
    -- pl.cy = cell_y
    -- pl.mx = mod_x
    -- pl.my = mod_y
    
    -- if we're not moving, we don't need to check
    if dx != 0 or dy != 0 then

        -- if the cell we're moving to is solid, cannot move
        if is_cell_solid(cell_x, cell_y) then
            return true
        
        -- annoying issue with clipping into a right side wall and being able to still move upwards
        --  doing this will check for the next block over from the current if overhanging into that
        --  column by more than a distance of 0.3
        elseif mod_x >= 0.3 then
            return is_cell_solid(cell_x+1, cell_y)
        end
    end
end

-- ########################################################################
--                          physics functions     end
-- ########################################################################

__gfx__
0000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeee
0000000000000000eedd11eeeedd11eeeedd11eeee11ddeeee11ddeeee11ddee000000000000000000000000000000000000000000000000eedd11eeeedd11ee
0070070000000000ed00117eed00117eed00117ee711d1dee711d1dee711d1de009999000099990000999900009999000099990000999900ed00117eed00117e
0007700000000000e01d106ee01d106ee01d106ee6117d0ee6117d0ee6117d0e09aaaaa009aaaaa009aaaaa009aaaaa009aaaaa009aaaaa0e01d106ee01d106e
0007700000000000e1d7177ee1d7177ee1d7177ee7711d1ee7711d1ee7711d1e99a99a9a99a99a9a99a99a9aaaa99a9aaaa99a9aaaa99a9ae1d7177ee1d7177e
0070070000000000e110066ee110066ee110066ee661101ee661101ee661101e9aff99aa9aff99aa9aff99aa9a9aa9a99a9aa9a99a9aa9a9e110066ee110066e
00000000000000001d17777e1d17777e1d17777ee77711dee77711dee77711de961ff19a961ff19a961ff19a9a9aa9a99a9aa9a99a9aa9a91d17777e1d17777e
0000000000000000016666ee016666ee016666eeee66011dee66011dee66011da7cffc7aa7cffc7aa7cffc7aaa9aa9a9aa9aa9a9aa9aa9a9016666ee016666ee
0000000000000000e01e7eee101e7eee111e7eeeeee7e10eeee7e101eee7e1110ffffff00ffffff00ffffff00a9aaaa00a9aa9a00a9aa9a0e01e7eeee01e7eee
0000000000000000e111d6eee111d66ed111d6eeee6d1111e66d111eee6d111d09ffff9009ffff9009ffff90099a9a9009a9a990099a9a90e111d6eee111d6ee
00000000000000000dd0116eed1111e61011116ee61111106e11111de61111018ee888e80ee88ee88ee88ee08e9a99980e9999e88e9999e00dd0116e0dd0116e
0000000000000000e00161e71dd06eeee00d1e7e7e11d10eeee101d0e7e1d00e88eeee88888eee8888eee88888e99e88888e99888899e888e00161e7e00161e7
0000000000000000e1116eee10d161eee1d16eeeeee61d1eee161101eee61d1e888ee8888288e8ffff8e8828888998888888e8ffff8e8888e1116eeee1116eee
0000000000000000d110e67e11116eeedd106deee76e011deee61111eed601ddff8888fff82882ffff88828fff8888fff88882ffff28888fd110e67ed110e67e
00000000000000000d1ee66ee1e177ee0dd11deee66ee010ee761e1eeed11dd00dd22dd00dd2211001122dd00dd22dd00dd2211001122dd00d1ee66e0d1ee66e
0000000000000000eeeeeeeeeeee66eee1001eeeeeeeeeeeee66eeeeeee1001e000000000dd0000000000dd0000000000dd0000000000dd0eeeeeeeeeeeeeeee
0400004000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000003366663333333333
04dddd4000044000eedd11eeeedd11eeeedd11eeeedd11eeeedd11eeeedd11ee0000000000000000000000000000000000000000000000003777777333ddd133
0444444000044000ed11d11eed11d11eed11d11eed11711eed11711eed11711e099099900990999009909990009999000099990009909990360660633ddd1113
0400004000022000e1d1011ee1d1011ee1d1011ee106661ee106661ee106661e99a9aa9999a9aa9999a9aa9909aaaaa009aaaaa099a9aa9977877877d7711771
0400004044422244e1111d1ee1111d1ee1111d1ee177771ee177771ee177771e9aa9a9a99aa9a9a99aa9a9a999a99a9aaaa99a9a9aa9a9a966866866d8811881
04dddd4022222552e110d11ee110d11ee110d11ee066666ee066666ee066666e9aaaa9f99aaaa9f99aaaa9f99aff99aa9a9aa9a99aaaa9f977777777dd811181
04444440000220001d11107e1d11107e1d11107ee777771ee777771ee777771e9a9a9ff09a9a9ff09a9a9ff0961ff19a9a9aa9a99a9a9ff060600606d11d1511
0400004000022000011601ee011601ee011601eeee16611dee16611dee16611d9a9961f09a9961f09a9961f0a7cffc7aaa9aa9a99a9961f0770dd077d1050501
ddddddddd111111de01111eee11111eee01111eeee117101ee117101ee11710e99f97cf099f97cf099f97cf00ffffff00a9aaaa099f97cf0366006633185d813
d111111dd111111de11d11eee1dd11d7711dd1eeeed1611eedd1611eeed161dd99efff0099efff0099efff0009ffff90099a9a9099efff003377773333181133
d111111dd111111d110dd01e10d1011eee10dd0eed016011dd101611ed06111d99eeeee0998ee8e09aeeee008ee888e88e9a999899eeeee0333dd33333336333
d111111dd111111d1110011e11001d1ee111001ee11171111e11117de171111190e88e009088ee8fa0e82ee0ffeeee8888e99e8890e88ff066377366d13883d1
ddddddddd111111de11111eee111111eddd111eeee11610eee116101ed11610e008ffe0000ff2e2f0088ffe0ff8ee8888889988800888ff0dd7667dd11681111
5555555551111115d1dd11dee01dd11dd11d11eeed17611de7661011d111176d008ff20001ff22dd00d8ff10022888ffff888880008822003337733333811333
55555555511111151111d11e11111d11111d111ee1766111e1761e1ee1e17611008ddd1000110ddd00dd01100dd22dd00dd22dd0008ddd10367667633d111663
5555555551111115eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000066d33d6611033081
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3030303030303031303030303030303100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3130000000000031003000000030003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000031000000300000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3130000000000031003030303030003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000031000000000000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000031003000300030003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000000000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000030003000300030003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000030000000000000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000303000000030303100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000300000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000000000003100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3100000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303000303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000025650246501e650226501e65022650206501d6501d6501c6501b6501965019650276502565019650236501a6501a6501e6502c6501f6501f650296502365026650256502665017650236502165018650
01100000156500e6502165012650116501a6501f65015650276502365013650276502165022650206501a650266501e65029650246501f6501b6501f65025650216501b650246502665026650246502465025650
